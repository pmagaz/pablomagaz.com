name: Build and Deploy
on:
  push:
    branches: [main]
jobs:
  build-and-deploy:
    name: Deploy Static Site and Docker Container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2.3.1

      # - name: Install Node.js
      #   uses: actions/setup-node@v1
      #   with:
      #     node-version: "18.x"

      # - name: Install Project Dependencies
      #   run: npm ci

      # - name: Install Gatsby CLI
      #   run: npm install -g gatsby-cli@5.13.2

      # - name: Build
      #   run: npm run build

      # - name: Copy assets content into public
      #   run: cp -Rf src/assets public

      # - name: Copy index content into public
      #   run: cp src/index.html public

      # - name: Verify build
      #   run: ls -la public

      # - name: Upload artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: site
      #     path: public

      - name: Install Dependencies 
        run: |
          sudo apt-get update
          sudo apt-get install -y wireguard resolvconf traceroute

      - name: Setup and Verify WireGuard
        env:
          WIREGUARD_CONFIG: ${{ secrets.WIREGUARD_CONFIG }}
        run: |
          echo "$WIREGUARD_CONFIG" | sudo tee /etc/wireguard/wg0.conf > /dev/null
          sudo chmod 600 /etc/wireguard/wg0.conf
          
          echo "WireGuard config file contents (excluding private key):"
          sudo grep -v PrivateKey /etc/wireguard/wg0.conf
          
          echo "Bringing up WireGuard interface..."
          sudo wg-quick up wg0
          
          echo "WireGuard interface status:"
          sudo wg show wg0
          
          echo "Current network interfaces:"
          ip addr show
          
          echo "Current routing table:"
          ip route
          
          echo "Attempting to ping the WireGuard endpoint..."
          ENDPOINT=$(sudo grep Endpoint /etc/wireguard/wg0.conf | awk '{print $3}' | cut -d: -f1)
          ping -c 4 $ENDPOINT
          
          echo "Checking for WireGuard handshake..."
          if sudo wg show wg0 | grep -q "latest handshake"; then
            echo "WireGuard handshake detected. Connection seems to be established."
          else
            echo "No WireGuard handshake detected. Connection may not be fully established."
            echo "This could be due to firewall issues, incorrect configuration, or the remote peer not responding."
            echo "Please check your WireGuard configuration and the status of your WireGuard server."
          fi
          
          echo "WireGuard setup completed. Proceeding with next steps regardless of connection status."
   
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.REGISTRY_HOST }}:30000/contact-form:latest .

      - name: Push Docker image
        run: |
          docker push --insecure-registry ${{ secrets.REGISTRY_HOST }}:30000/contact-form:latest
      
      - name: Cleanup WireGuard
        if: always()
        run: sudo wg-quick down wg0