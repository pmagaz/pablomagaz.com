name: Build and Deploy
on:
  push:
    branches: [main]
jobs:
  build-and-deploy:
    name: Deploy Static Site and Docker Container
    runs-on: ubuntu-latest
    environment: production  # Define an environment
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # - name: Install Node.js
      #   uses: actions/setup-node@v1
      #   with:
      #     node-version: "18.x"

      # - name: Install Project Dependencies
      #   run: npm ci

      # - name: Install Gatsby CLI
      #   run: npm install -g gatsby-cli@5.13.2

      # - name: Build
      #   run: npm run build

      # - name: Copy assets content into public
      #   run: cp -Rf src/assets public

      # - name: Copy index content into public
      #   run: cp src/index.html public

      # - name: Verify build
      #   run: ls -la public

      # - name: Upload artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: site
      #     path: public

      # - name: Install Dependencies 
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y wireguard resolvconf iputils-ping traceroute
      - name: Set up WireGuard Connection
        uses: niklaskeerl/easy-wireguard-action@v2
        with:
          WG_CONFIG_FILE: ${{ secrets.WG_CONFIG_FILE }}
      # # - name: Setup WireGuard 
      # #   run: |
      # #         sudo apt install resolvconf
      # #         sudo apt install wireguard
      # #         echo "${{ secrets.WIREGUARD_CONFIG }}" > wg0.conf
      # #         sudo chmod 600 wg0.conf
      # #         echo "setting config"
      # #         sudo wg-quick up ./wg0.conf
      # #   shell: bash

      # - name: Setup and Verify WireGuard
      #   env:
      #     WIREGUARD_PRIVATE_KEY: ${{ secrets.WIREGUARD_PRIVATE_KEY }}
      #     WIREGUARD_CONFIG: ${{ secrets.WIREGUARD_CONFIG }}
      #     REGISTRY_HOST: ${{ secrets.REGISTRY_HOST }}
      #   run: |
      #     echo "$WIREGUARD_CONFIG" | sudo tee /etc/wireguard/wg0.conf > /dev/null
      #     sudo chmod 600 /etc/wireguard/wg0.conf
          
      #     # Bring up WireGuard interface
      #     sudo wg-quick up wg0
          
      #     # Function to check WireGuard status
      #     check_wg_status() {
      #       if sudo wg show wg0 | grep -q "latest handshake" > /dev/null 2>&1; then
      #         echo "WireGuard connection established"
      #         return 0
      #       else
      #         echo "No recent handshake detected"
      #         return 1
      #       fi
      #     }
          
      #     # Wait for WireGuard to establish connection (up to 30 seconds)
      #     for i in {1..6}; do
      #       if check_wg_status; then
      #         break
      #       fi
      #       echo "Waiting for WireGuard to establish connection... (attempt $i)"
      #       sleep 5
      #     done
          
      #     # Final check and diagnostics
      #     if ! check_wg_status; then
      #       echo "WireGuard connection failed to establish. Diagnostics:"
      #       echo "Network interfaces:"
      #       ip -br addr show
      #       echo "Default route:"
      #       ip route | grep default
      #       exit 1
      #     fi
          
      #     # Verify connectivity to the target host
      #     if ! ping -c 4 $REGISTRY_HOST > /dev/null 2>&1; then
      #       echo "Cannot ping target host through WireGuard tunnel"
      #       echo "Traceroute to target host (IP addresses only):"
      #       traceroute -n $REGISTRY_HOST
      #       exit 1
      #     fi
          
      #     echo "WireGuard connection verified successfully"


      - name: Configure Dockerregistry
        run: |
          echo '{ "insecure-registries" : ["${{ secrets.REGISTRY_HOST }}:${{ secrets.REGISTRY_PORT }}"] }' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      - name: Build Docker image
        run: |
          docker build -t 172.104.202.186:30000/contact-form:latest .
          #docker build -t ${{ secrets.REGISTRY_HOST }}:${{ secrets.REGISTRY_PORT }}/contact-form:latest .

      - name: Push Docker image
        run: |
          docker push 172.104.202.186:30000/contact-form:latest
          #docker push ${{ secrets.REGISTRY_HOST }}:${{ secrets.REGISTRY_PORT }}/contact-form:latest
      
      - name: Cleanup WireGuard
        if: always()
        run: sudo wg-quick down wg0