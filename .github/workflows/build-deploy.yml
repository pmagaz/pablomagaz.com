name: Build and Deploy
on:
  push:
    branches: [main]
jobs:
  build-and-deploy:
    name: Deploy Static Site and Docker Container
    runs-on: ubuntu-latest
    environment: production  # Define an environment
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # - name: Install Node.js
      #   uses: actions/setup-node@v1
      #   with:
      #     node-version: "18.x"

      # - name: Install Project Dependencies
      #   run: npm ci

      # - name: Install Gatsby CLI
      #   run: npm install -g gatsby-cli@5.13.2

      # - name: Build
      #   run: npm run build

      # - name: Copy assets content into public
      #   run: cp -Rf src/assets public

      # - name: Copy index content into public
      #   run: cp src/index.html public

      # - name: Verify build
      #   run: ls -la public

      # - name: Upload artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: site
      #     path: public

      - name: Install Dependencies 
        run: |
          sudo apt-get update
          sudo apt-get install -y wireguard resolvconf iputils-ping traceroute

      # - name: Setup WireGuard Interface
      #   env:
      #     WIREGUARD_PRIVATE_KEY: ${{ secrets.WIREGUARD_PRIVATE_KEY }}
      #     WIREGUARD_ENDPOINT: ${{ secrets.WIREGUARD_ENDPOINT }}
      #     WIREGUARD_PUBLIC_KEY: ${{ secrets.WIREGUARD_PUBLIC_KEY }}
      #     WIREWARD_PEER_KEY: ${{ secrets.WIREWARD_PEER_KEY }}
      #     WIREGUARD_IPS: ${{ secrets.WIREWARD_IPS }}
      #     WIREGUARD_ALLOWED_IPS: ${{ secrets.WIREGUARD_ALLOWED_IPS }}
      #     REGISTRY_HOST: ${{ secrets.REGISTRY_HOST }}
      #   run: |
      #     echo "$WIREGUARD_PRIVATE_KEY" > privatekey
      #     sudo ip link add dev wg0 type wireguard
      #     sudo ip address add dev wg0 10.0.0.2/32 peer 10.0.0.1
      #     #sudo ip address add dev wg0 10.0.0.2/32 peer 172.104.202.186
      #     sudo wg set wg0 listen-port 51820 private-key privatekey peer $WIREWARD_PEER_KEY allowed-ips 0.0.0.0/0 endpoint 172.104.202.186:51820
      #     sudo ip link set up dev wg0
          
      #     # Cleanup
      #     #sudo ip link delete dev wg0
      #     #rm privatekey

      - name: Set up WireGuard Connection
        uses: niklaskeerl/easy-wireguard-action@v2
        with:
          WG_CONFIG_FILE: ${{ secrets.WIREGUARD_CONFIG }}
      
      # - name: Enhanced WireGuard Diagnostics
      #   run: |
      #     echo "WireGuard Configuration:"
      #     sudo wg show wg0
      #     echo "Routing Table:"
      #     ip route
      #     echo "Pinging WireGuard Server (without VPN):"
      #     ping -c 4 $(echo ${{ secrets.WIREGUARD_ENDPOINT }} | cut -d: -f1)
      #     echo "Traceroute to WireGuard Server:"
      #     traceroute $(echo ${{ secrets.WIREGUARD_ENDPOINT }} | cut -d: -f1)
      #     echo "Checking UDP Connectivity to WireGuard Server:"
      #     nc -zu -v $(echo ${{ secrets.WIREGUARD_ENDPOINT }} | tr ':' ' ') 
      #     echo "Firewall Rules:"
      #     sudo iptables -L -n -v
      #     echo "WireGuard Kernel Module Status:"
      #     lsmod | grep wireguard
      #     echo "System Logs Related to WireGuard:"
      #     sudo journalctl -xe | grep -i wireguard

      # - name: Test Registry Connection
      #   run: |
      #     echo "Testing connection to registry..."
      #     curl -v --max-time 10 http://${{ secrets.REGISTRY_HOST }}:30000/v2/ || echo "Curl failed, but continuing workflow"

      # - name: Network diagnostics
      #   run: |
      #     echo "Pinging registry host..."
      #     ping -c 4 ${{ secrets.REGISTRY_HOST }}
      #     echo "Tracing route to registry host..."
      #     traceroute ${{ secrets.REGISTRY_HOST }}
      #     echo "Checking registry connection..."
      #     nc -zv ${{ secrets.REGISTRY_HOST }} 30000

      - name: Configure Dockerregistry
        run: |
          echo '{ "insecure-registries" : ["${{ secrets.REGISTRY_HOST }}:30000"] }' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.REGISTRY_HOST }}:30000/contact-form:latest .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.REGISTRY_HOST }}:30000/contact-form:latest
      
      - name: Cleanup WireGuard
        if: always()
        run: sudo wg-quick down wg0