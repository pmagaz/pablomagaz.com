name: Build and Deploy
on:
  push:
    branches: [main]
jobs:
  build-and-deploy:
    name: Deploy Static Site and Docker Container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2.3.1

      # - name: Install Node.js
      #   uses: actions/setup-node@v1
      #   with:
      #     node-version: "18.x"

      # - name: Install Project Dependencies
      #   run: npm ci

      # - name: Install Gatsby CLI
      #   run: npm install -g gatsby-cli@5.13.2

      # - name: Build
      #   run: npm run build

      # - name: Copy assets content into public
      #   run: cp -Rf src/assets public

      # - name: Copy index content into public
      #   run: cp src/index.html public

      # - name: Verify build
      #   run: ls -la public

      # - name: Upload artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: site
      #     path: public

      - name: Install Dependencies 
        run: |
          sudo apt-get update
          sudo apt-get install -y wireguard resolvconf

      - name: Setup WireGuard Interface
        env:
          WIREGUARD_PRIVATE_KEY: ${{ secrets.WIREGUARD_PRIVATE_KEY }}
          WIREGUARD_ENDPOINT: ${{ secrets.WIREGUARD_ENDPOINT }}
          WIREGUARD_PUBLIC_KEY: ${{ secrets.WIREGUARD_PUBLIC_KEY }}
          WIREGUARD_IPS: ${{ secrets.WIREWARD_IPS }}
          WIREGUARD_ALLOWED_IPS: ${{ secrets.WIREGUARD_ALLOWED_IPS }}
        run: |
          echo "$WIREGUARD_PRIVATE_KEY" > privatekey
          sudo chmod 600 privatekey

          sudo ip link add dev wg0 type wireguard

          # Set the IP address from WIREGUARD_IPS
          sudo ip address add dev wg0 $WIREGUARD_IPS

          # Setup WireGuard with the provided configuration
          sudo wg set wg0 \
            private-key privatekey \
            peer $WIREGUARD_PUBLIC_KEY \
            allowed-ips $WIREGUARD_ALLOWED_IPS \
            endpoint $WIREGUARD_ENDPOINT

          sudo ip link set up dev wg0

          # Display WireGuard configuration for verification
          # echo "WireGuard configuration:"
          # sudo wg show wg0

          # # Display network interfaces
          # echo "Network interfaces:"
          # ip addr show

          # # Display routing table
          # echo "Routing table:"
          # ip route

      # - name: Test Connection
      #   run: |
      #     # Extract the first IP from WIREGUARD_ALLOWED_IPS to test
      #     TEST_IP=$(echo ${{ secrets.WIREGUARD_ALLOWED_IPS }} | cut -d',' -f1 | cut -d'/' -f1)
      #     echo "Attempting to curl $TEST_IP"
      #     curl -vvv http://$TEST_IP || echo "Curl failed, but continuing workflow"

      - name: Configure Dockerregistry
        run: |
          echo '{ "insecure-registries" : ["${{ secrets.REGISTRY_HOST }}:30000"] }' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.REGISTRY_HOST }}:30000/contact-form:latest .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.REGISTRY_HOST }}:30000/contact-form:latest
      
      - name: Cleanup WireGuard
        if: always()
        run: sudo wg-quick down wg0