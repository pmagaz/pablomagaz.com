name: Build and Deploy
on:
  push:
    branches: [main]
jobs:
  build-and-deploy:
    name: Deploy Static Site and Docker Container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2.3.1

      # - name: Install Node.js
      #   uses: actions/setup-node@v1
      #   with:
      #     node-version: "18.x"

      # - name: Install Project Dependencies
      #   run: npm ci

      # - name: Install Gatsby CLI
      #   run: npm install -g gatsby-cli@5.13.2

      # - name: Build
      #   run: npm run build

      # - name: Copy assets content into public
      #   run: cp -Rf src/assets public

      # - name: Copy index content into public
      #   run: cp src/index.html public

      # - name: Verify build
      #   run: ls -la public

      # - name: Upload artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: site
      #     path: public

      - name: Install Dependencies 
        run: |
          sudo apt-get update
          sudo apt-get install -y wireguard resolvconf traceroute

      - name: Setup and Verify WireGuard
        env:
          WIREGUARD_PRIVATE_KEY: ${{ secrets.WIREGUARD_PRIVATE_KEY }}
          WIREGUARD_CONFIG: ${{ secrets.WIREGUARD_CONFIG }}
        run: |
          echo "$WIREGUARD_CONFIG" | sudo tee /etc/wireguard/wg0.conf > /dev/null
          sudo chmod 600 /etc/wireguard/wg0.conf
          
          # Bring up WireGuard interface
          sudo wg-quick up wg0
          
          # Function to check WireGuard status
          check_wg_status() {
            if sudo wg show wg0 | grep -q "latest handshake" > /dev/null 2>&1; then
              echo "WireGuard connection established"
              return 0
            else
              echo "No recent handshake detected"
              return 1
            fi
          }
          
          # Wait for WireGuard to establish connection (up to 30 seconds)
          for i in {1..6}; do
            if check_wg_status; then
              break
            fi
            echo "Waiting for WireGuard to establish connection... (attempt $i)"
            sleep 5
          done
          
          if ! check_wg_status; then
            echo "WireGuard connection failed to establish."
            exit 1
          fi
          
          echo "WireGuard connection verified successfully"
   
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.REGISTRY_HOST }}:30000/contact-form:latest .

      - name: Push Docker image
        run: |
          docker push --insecure-registry ${{ secrets.REGISTRY_HOST }}:30000/contact-form:latest
      
      - name: Cleanup WireGuard
        if: always()
        run: sudo wg-quick down wg0